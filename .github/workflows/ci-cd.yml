name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
        
    - name: Lint code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test application
      run: |
        python -m py_compile *.py
        python app.py &
        sleep 5
        pkill -f "python app.py" || true

  deploy-github-pages:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        mkdir -p _site
        cp *.py _site/
        cp requirements.txt _site/
        echo "# Application Deployed" > _site/README.md
        echo "Deployment successful at $(date)" >> _site/README.md
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: '_site'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  deploy-release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release Package
      run: |
        mkdir -p release
        cp *.py release/
        cp requirements.txt release/
        cp -r screenshots release/ 2>/dev/null || true
        tar -czf release-${{ github.sha }}.tar.gz -C release .
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          Download and extract the release package to deploy locally:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/release-${{ github.sha }}.tar.gz
          tar -xzf release-${{ github.sha }}.tar.gz
          pip install -r requirements.txt
          python app.py
          ```
        draft: false
        prerelease: false